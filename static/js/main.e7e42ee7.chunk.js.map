{"version":3,"sources":["logo.svg","TileBoard.js","UserInput.js","App.js","index.js"],"names":["module","exports","TileBoard","_ref","guesses","currentInput","colors","board","row","rowLetters","length","padEnd","push","React","createElement","className","map","word","rowIdx","key","split","char","colIdx","_colors$rowIdx","bgColor","style","backgroundColor","borderColor","color","UserInput","targetWord","setGuesses","input","setInput","setColors","setGameOver","setHasWon","gameOver","focusRef","useRef","useEffect","current","focus","handleClick","document","addEventListener","removeEventListener","submitGuess","newGuesses","result","Array","fill","wordArray","guessArray","used","i","j","prev","ref","tabIndex","onKeyDown","e","slice","test","toUpperCase","outline","App","randomWord","setRandomWord","useState","hasWon","getNewRandomWord","fetch","then","res","text","words","w","trim","filter","randomIndex","Math","floor","random","console","error","src","logo","alt","Fragment","marginTop","onClick","restartGame","listStyleType","padding","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e7e42ee7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.997dbe1b.svg\";","import React from 'react';\nimport './TileBoard.css';\n\nfunction TileBoard({ guesses, currentInput, colors }) {\n  const rows = 6;\n  const columns = 5;\n  const board = [];\n\n  for (let row = 0; row < rows; row++) {\n    let rowLetters = '';\n\n    if (row < guesses.length) {\n      rowLetters = guesses[row];\n    } else if (row === guesses.length && currentInput) {\n      rowLetters = currentInput;\n    }\n\n    // Pad each row to 5 characters\n    rowLetters = rowLetters.padEnd(columns, ' ');\n    board.push(rowLetters);\n  }\n\n  return (\n    <div className=\"tile-board\">\n      {board.map((word, rowIdx) => (\n        <div className=\"tile-row\" key={rowIdx}>\n          {word.split('').map((char, colIdx) => {\n            const bgColor =\n              rowIdx < guesses.length\n                ? colors?.[rowIdx]?.[colIdx] || '#ccc'\n                : 'white';\n\n            return (\n              <div\n                className=\"tile\"\n                key={colIdx}\n                style={{\n                  backgroundColor: bgColor,\n                  borderColor: bgColor !== 'white' ? bgColor : '#ccc',\n                  color: bgColor !== 'white' ? 'white' : 'black',\n                }}\n              >\n                {char}\n              </div>\n            );\n          })}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default TileBoard;\n","import React, { useEffect, useRef } from 'react';\n\nfunction UserInput({\n  targetWord,\n  guesses,\n  setGuesses,\n  input,\n  setInput,\n  colors,\n  setColors,\n  setGameOver,\n  setHasWon,\n  gameOver,\n}) {\n  const focusRef = useRef(null);\n\n  // Refocus on load and after game restarts\n  useEffect(() => {\n    if (focusRef.current) {\n      focusRef.current.focus();\n    }\n  }, [gameOver]);\n\n  // Refocus when clicking anywhere on the page\n  useEffect(() => {\n    const handleClick = () => {\n      if (focusRef.current) {\n        focusRef.current.focus();\n      }\n    };\n    document.addEventListener('click', handleClick);\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  }, []);\n\n  const handleKeyDown = (e) => {\n    if (gameOver) return;\n\n    if (e.key === 'Backspace') {\n      setInput((prev) => prev.slice(0, -1));\n    } else if (e.key === 'Enter' && input.length === 5) {\n      submitGuess();\n    } else if (/^[a-zA-Z]$/.test(e.key) && input.length < 5) {\n      setInput((prev) => prev + e.key.toUpperCase());\n    }\n  };\n\n  const submitGuess = () => {\n    const newGuesses = [...guesses, input];\n    const result = Array(5).fill('gray');\n    const wordArray = targetWord.split('');\n    const guessArray = input.split('');\n    const used = Array(5).fill(false);\n\n    // First pass: green letters\n    for (let i = 0; i < 5; i++) {\n      if (guessArray[i] === wordArray[i]) {\n        result[i] = 'green';\n        used[i] = true;\n      }\n    }\n\n    // Second pass: orange letters\n    for (let i = 0; i < 5; i++) {\n      if (result[i] === 'green') continue;\n      for (let j = 0; j < 5; j++) {\n        if (!used[j] && guessArray[i] === wordArray[j]) {\n          result[i] = 'orange';\n          used[j] = true;\n          break;\n        }\n      }\n    }\n\n    setGuesses(newGuesses);\n    setColors((prev) => [...prev, result]);\n    setInput('');\n\n    if (input === targetWord) {\n      setHasWon(true);\n      setGameOver(true);\n    } else if (newGuesses.length >= 6) {\n      setHasWon(false);\n      setGameOver(true);\n    }\n  };\n\n  return (\n    <div\n      ref={focusRef}\n      tabIndex={0}\n      onKeyDown={handleKeyDown}\n      style={{ outline: 'none' }}\n    />\n  );\n}\n\nexport default UserInput;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport TileBoard from './TileBoard';\nimport UserInput from './UserInput';\nimport logo from './logo.svg';\n\nfunction App() {\n  const [randomWord, setRandomWord] = useState('');\n  const [guesses, setGuesses] = useState([]);\n  const [input, setInput] = useState('');\n  const [colors, setColors] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [hasWon, setHasWon] = useState(false);\n\n  // Load a random 5-letter word\n  const getNewRandomWord = () => {\n    fetch('/words.txt')\n      .then((res) => res.text())\n      .then((text) => {\n        const words = text\n          .split('\\n')\n          .map((w) => (w ? w.trim().toUpperCase() : ''))\n          .filter((w) => w.length === 5);\n        if (words.length > 0) {\n          const randomIndex = Math.floor(Math.random() * words.length);\n          setRandomWord(words[randomIndex]);\n        } else {\n          console.error('No valid words found.');\n        }\n      });\n  };\n\n  // Initial word load\n  useEffect(() => {\n    getNewRandomWord();\n  }, []);\n\n  // Restart everything\n  const restartGame = () => {\n    setGuesses([]);\n    setColors([]);\n    setInput('');\n    setGameOver(false);\n    setHasWon(false);\n    getNewRandomWord();\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Worlde Replica!</p>\n      </header>\n\n      {randomWord && (\n        <>\n          <TileBoard\n            guesses={guesses}\n            currentInput={input}\n            colors={colors}\n          />\n          <UserInput\n            targetWord={randomWord}\n            guesses={guesses}\n            setGuesses={setGuesses}\n            input={input}\n            setInput={setInput}\n            colors={colors}\n            setColors={setColors}\n            setGameOver={setGameOver}\n            setHasWon={setHasWon}\n            gameOver={gameOver}\n          />\n        </>\n      )}\n\n      {gameOver && (\n        <div style={{ marginTop: '20px' }}>\n          <p>\n            {hasWon ? \"🎉 You guessed the word!\" : \"❌ You're out of tries.\"}  \n          </p>\n          <p>The word was: <strong>{randomWord}</strong></p>\n          <button onClick={restartGame}>Play Again</button>\n        </div>\n      )}\n\n        <ul style={{ listStyleType: 'none', padding: 0 }}>\n          <li>Rules:</li>\n          <li>Guess the word in 6 tries.</li>\n          <li>Each guess must be a valid 5-letter word.</li>\n          <li>After each guess, the color of the tiles will change to show how close your guess was to the word.</li>\n          <li>Green means correct letter and position.</li>\n          <li>Yellow means correct letter but wrong position.</li>\n          <li>Gray means letter not in the word.</li>\n        </ul>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}